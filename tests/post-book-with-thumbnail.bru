meta {
  name: post-book-with-thumbnail
  type: http
  seq: 1
}

post {
  url: {{base_url}}/books
  body: json
  auth: none
}

headers {
  Authorization: Bearer {{jwt_token}}
}

body:json {
  {
    "title": "Test Book with Thumbnail",
    "author": "Test Author",
    "status": "WANT_TO_READ",
    "thumbnail": "https://books.google.com/books/content?id=testId&printsec=frontcover&img=1&zoom=1&source=gbs_api"
  }
}

assert {
  res.status: eq 201
  res.body.id: isDefined
  res.body.title: eq "Test Book with Thumbnail"
  res.body.author: eq "Test Author"
  res.body.status: eq "WANT_TO_READ"
  res.body.thumbnail: eq "https://books.google.com/books/content?id=testId&printsec=frontcover&img=1&zoom=1&source=gbs_api"
}

script:post-response {
  test("Book created with thumbnail successfully", () => {
    expect(res.body.thumbnail).to.be.a('string');
    expect(res.body.thumbnail).to.match(/^https?:\/\/.+/);
    
    // Store book ID for cleanup or further testing
    bru.setVar("test_book_with_thumbnail_id", res.body.id);
  });

  test("Thumbnail URL format is valid", () => {
    const thumbnailUrl = res.body.thumbnail;
    expect(thumbnailUrl).to.include('books.google.com');
    expect(thumbnailUrl).to.include('printsec=frontcover');
  });
}